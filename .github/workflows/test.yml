name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
  unit-and-integration:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Run component tests
        run: npm run test:component
        
      - name: Run service tests
        run: npm run test -- src/tests/services
        
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Generate coverage report
        run: npm run test:coverage
        
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build for E2E testing
        run: npm run build:dev
        
      - name: Run E2E tests
        run: npx playwright test
        
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [unit-and-integration, e2e]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist/
          
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: dist
          
      - name: Set up Supabase CLI
        run: npm install -g supabase
        
      - name: Deploy to Preview environment
        run: echo "Deploying to preview environment - implementation will depend on hosting platform"
        # Add specific deployment steps based on your hosting platform
        # This is a placeholder for the actual deployment command
          
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: dist
          
      - name: Set up Supabase CLI
        run: npm install -g supabase
        
      - name: Deploy to Production
        run: echo "Deploying to production environment - implementation will depend on hosting platform"
        # Add specific deployment steps based on your hosting platform
        # This is a placeholder for the actual deployment command
        
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-preview, deploy-production]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: echo "Workflow completed successfully"
        
      - name: Notify on failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: echo "Workflow failed"
        # Add notification steps (e.g., Slack, email) as needed 